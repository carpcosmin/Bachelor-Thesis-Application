// Generated by view binder compiler. Do not edit!
package com.example.aplicatielicenta.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import androidx.viewpager.widget.ViewPager;
import com.example.aplicatielicenta.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import me.relex.circleindicator.CircleIndicator;

public final class ActivityEditOfferBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final Button btnAddImage;

  @NonNull
  public final Button btnSaveOffer;

  @NonNull
  public final CardView cardView;

  @NonNull
  public final CheckBox checkBoxAC;

  @NonNull
  public final CheckBox checkBoxBalcony;

  @NonNull
  public final CheckBox checkBoxHeating;

  @NonNull
  public final CheckBox checkBoxParking;

  @NonNull
  public final CheckBox checkBoxPets;

  @NonNull
  public final CheckBox checkBoxSmokers;

  @NonNull
  public final ViewPager editOfferViewPager;

  @NonNull
  public final EditText etEditAddress;

  @NonNull
  public final EditText etEditDescription;

  @NonNull
  public final EditText etEditFloor;

  @NonNull
  public final EditText etEditPrice;

  @NonNull
  public final EditText etEditRooms;

  @NonNull
  public final EditText etEditSurface;

  @NonNull
  public final EditText etEditTitle;

  @NonNull
  public final CircleIndicator indicator;

  @NonNull
  public final Spinner spinnerType;

  @NonNull
  public final TextView tvDescription;

  @NonNull
  public final TextView tvFacilites;

  @NonNull
  public final TextView tvFloor;

  @NonNull
  public final TextView tvNoOfRooms;

  @NonNull
  public final TextView tvOfferAddress;

  @NonNull
  public final TextView tvOfferTitle;

  @NonNull
  public final TextView tvPrice;

  @NonNull
  public final TextView tvPropertyType;

  @NonNull
  public final TextView tvSurface;

  private ActivityEditOfferBinding(@NonNull ScrollView rootView, @NonNull Button btnAddImage,
      @NonNull Button btnSaveOffer, @NonNull CardView cardView, @NonNull CheckBox checkBoxAC,
      @NonNull CheckBox checkBoxBalcony, @NonNull CheckBox checkBoxHeating,
      @NonNull CheckBox checkBoxParking, @NonNull CheckBox checkBoxPets,
      @NonNull CheckBox checkBoxSmokers, @NonNull ViewPager editOfferViewPager,
      @NonNull EditText etEditAddress, @NonNull EditText etEditDescription,
      @NonNull EditText etEditFloor, @NonNull EditText etEditPrice, @NonNull EditText etEditRooms,
      @NonNull EditText etEditSurface, @NonNull EditText etEditTitle,
      @NonNull CircleIndicator indicator, @NonNull Spinner spinnerType,
      @NonNull TextView tvDescription, @NonNull TextView tvFacilites, @NonNull TextView tvFloor,
      @NonNull TextView tvNoOfRooms, @NonNull TextView tvOfferAddress,
      @NonNull TextView tvOfferTitle, @NonNull TextView tvPrice, @NonNull TextView tvPropertyType,
      @NonNull TextView tvSurface) {
    this.rootView = rootView;
    this.btnAddImage = btnAddImage;
    this.btnSaveOffer = btnSaveOffer;
    this.cardView = cardView;
    this.checkBoxAC = checkBoxAC;
    this.checkBoxBalcony = checkBoxBalcony;
    this.checkBoxHeating = checkBoxHeating;
    this.checkBoxParking = checkBoxParking;
    this.checkBoxPets = checkBoxPets;
    this.checkBoxSmokers = checkBoxSmokers;
    this.editOfferViewPager = editOfferViewPager;
    this.etEditAddress = etEditAddress;
    this.etEditDescription = etEditDescription;
    this.etEditFloor = etEditFloor;
    this.etEditPrice = etEditPrice;
    this.etEditRooms = etEditRooms;
    this.etEditSurface = etEditSurface;
    this.etEditTitle = etEditTitle;
    this.indicator = indicator;
    this.spinnerType = spinnerType;
    this.tvDescription = tvDescription;
    this.tvFacilites = tvFacilites;
    this.tvFloor = tvFloor;
    this.tvNoOfRooms = tvNoOfRooms;
    this.tvOfferAddress = tvOfferAddress;
    this.tvOfferTitle = tvOfferTitle;
    this.tvPrice = tvPrice;
    this.tvPropertyType = tvPropertyType;
    this.tvSurface = tvSurface;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityEditOfferBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityEditOfferBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_edit_offer, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityEditOfferBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnAddImage;
      Button btnAddImage = ViewBindings.findChildViewById(rootView, id);
      if (btnAddImage == null) {
        break missingId;
      }

      id = R.id.btnSaveOffer;
      Button btnSaveOffer = ViewBindings.findChildViewById(rootView, id);
      if (btnSaveOffer == null) {
        break missingId;
      }

      id = R.id.card_view;
      CardView cardView = ViewBindings.findChildViewById(rootView, id);
      if (cardView == null) {
        break missingId;
      }

      id = R.id.checkBoxAC;
      CheckBox checkBoxAC = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxAC == null) {
        break missingId;
      }

      id = R.id.checkBoxBalcony;
      CheckBox checkBoxBalcony = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxBalcony == null) {
        break missingId;
      }

      id = R.id.checkBoxHeating;
      CheckBox checkBoxHeating = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxHeating == null) {
        break missingId;
      }

      id = R.id.checkBoxParking;
      CheckBox checkBoxParking = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxParking == null) {
        break missingId;
      }

      id = R.id.checkBoxPets;
      CheckBox checkBoxPets = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxPets == null) {
        break missingId;
      }

      id = R.id.checkBoxSmokers;
      CheckBox checkBoxSmokers = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxSmokers == null) {
        break missingId;
      }

      id = R.id.editOffer_view_pager;
      ViewPager editOfferViewPager = ViewBindings.findChildViewById(rootView, id);
      if (editOfferViewPager == null) {
        break missingId;
      }

      id = R.id.etEditAddress;
      EditText etEditAddress = ViewBindings.findChildViewById(rootView, id);
      if (etEditAddress == null) {
        break missingId;
      }

      id = R.id.etEditDescription;
      EditText etEditDescription = ViewBindings.findChildViewById(rootView, id);
      if (etEditDescription == null) {
        break missingId;
      }

      id = R.id.etEditFloor;
      EditText etEditFloor = ViewBindings.findChildViewById(rootView, id);
      if (etEditFloor == null) {
        break missingId;
      }

      id = R.id.etEditPrice;
      EditText etEditPrice = ViewBindings.findChildViewById(rootView, id);
      if (etEditPrice == null) {
        break missingId;
      }

      id = R.id.etEditRooms;
      EditText etEditRooms = ViewBindings.findChildViewById(rootView, id);
      if (etEditRooms == null) {
        break missingId;
      }

      id = R.id.etEditSurface;
      EditText etEditSurface = ViewBindings.findChildViewById(rootView, id);
      if (etEditSurface == null) {
        break missingId;
      }

      id = R.id.etEditTitle;
      EditText etEditTitle = ViewBindings.findChildViewById(rootView, id);
      if (etEditTitle == null) {
        break missingId;
      }

      id = R.id.indicator;
      CircleIndicator indicator = ViewBindings.findChildViewById(rootView, id);
      if (indicator == null) {
        break missingId;
      }

      id = R.id.spinnerType;
      Spinner spinnerType = ViewBindings.findChildViewById(rootView, id);
      if (spinnerType == null) {
        break missingId;
      }

      id = R.id.tvDescription;
      TextView tvDescription = ViewBindings.findChildViewById(rootView, id);
      if (tvDescription == null) {
        break missingId;
      }

      id = R.id.tvFacilites;
      TextView tvFacilites = ViewBindings.findChildViewById(rootView, id);
      if (tvFacilites == null) {
        break missingId;
      }

      id = R.id.tvFloor;
      TextView tvFloor = ViewBindings.findChildViewById(rootView, id);
      if (tvFloor == null) {
        break missingId;
      }

      id = R.id.tvNoOfRooms;
      TextView tvNoOfRooms = ViewBindings.findChildViewById(rootView, id);
      if (tvNoOfRooms == null) {
        break missingId;
      }

      id = R.id.tvOfferAddress;
      TextView tvOfferAddress = ViewBindings.findChildViewById(rootView, id);
      if (tvOfferAddress == null) {
        break missingId;
      }

      id = R.id.tvOfferTitle;
      TextView tvOfferTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvOfferTitle == null) {
        break missingId;
      }

      id = R.id.tvPrice;
      TextView tvPrice = ViewBindings.findChildViewById(rootView, id);
      if (tvPrice == null) {
        break missingId;
      }

      id = R.id.tvPropertyType;
      TextView tvPropertyType = ViewBindings.findChildViewById(rootView, id);
      if (tvPropertyType == null) {
        break missingId;
      }

      id = R.id.tvSurface;
      TextView tvSurface = ViewBindings.findChildViewById(rootView, id);
      if (tvSurface == null) {
        break missingId;
      }

      return new ActivityEditOfferBinding((ScrollView) rootView, btnAddImage, btnSaveOffer,
          cardView, checkBoxAC, checkBoxBalcony, checkBoxHeating, checkBoxParking, checkBoxPets,
          checkBoxSmokers, editOfferViewPager, etEditAddress, etEditDescription, etEditFloor,
          etEditPrice, etEditRooms, etEditSurface, etEditTitle, indicator, spinnerType,
          tvDescription, tvFacilites, tvFloor, tvNoOfRooms, tvOfferAddress, tvOfferTitle, tvPrice,
          tvPropertyType, tvSurface);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
